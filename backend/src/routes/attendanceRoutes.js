const express = require('express');
const { body, param, query } = require('express-validator');
const {
  createAttendance,
  getAttendances,
  getAttendanceById,
  updateAttendance,
  approveAttendance,
  cancelAttendance,
  getAttendanceStats,
  intelligentDispatch,
  multiDriverDispatch
} = require('../controllers/attendanceController');
const { authenticate, authorize } = require('../middleware/auth');

const router = express.Router();

// Valida√ß√µes para criar atendimento
const createAttendanceValidation = [
  body('callerName')
    .trim()
    .isLength({ min: 2, max: 100 })
    .withMessage('Nome do solicitante deve ter entre 2 e 100 caracteres'),
  body('callerPhone')
    .trim()
    .isLength({ min: 10, max: 20 })
    .withMessage('Telefone deve ter entre 10 e 20 caracteres'),
  body('patientName')
    .trim()
    .isLength({ min: 2, max: 100 })
    .withMessage('Nome do paciente deve ter entre 2 e 100 caracteres'),
  body('medicalCondition')
    .optional({ values: 'falsy' })
    .trim()
    .isLength({ min: 3, max: 1000 })
    .withMessage('Condi√ß√£o m√©dica deve ter entre 3 e 1000 caracteres'),
  body('priority')
    .isIn(['Baixa', 'M√©dia', 'Alta', 'Cr√≠tica'])
    .withMessage('Prioridade deve ser: Baixa, M√©dia, Alta ou Cr√≠tica'),
  body('originAddress')
    .optional({ values: 'falsy' })
    .trim()
    .isLength({ min: 5, max: 500 })
    .withMessage('Endere√ßo de origem deve ter entre 5 e 500 caracteres'),
  body('patientAge')
    .optional({ values: 'falsy' })
    .isInt({ min: 0, max: 120 })
    .withMessage('Idade deve ser entre 0 e 120 anos'),
  body('patientDocument')
    .optional({ values: 'falsy' })
    .trim()
    .isLength({ min: 11, max: 20 })
    .withMessage('Documento deve ter entre 11 e 20 caracteres'),
  body('originLatitude')
    .optional({ values: 'falsy' })
    .isDecimal()
    .withMessage('Latitude deve ser um n√∫mero decimal'),
  body('originLongitude')
    .optional({ values: 'falsy' })
    .isDecimal()
    .withMessage('Longitude deve ser um n√∫mero decimal')
];

// Valida√ß√µes para atualizar atendimento
const updateAttendanceValidation = [
  param('id')
    .isInt()
    .withMessage('ID deve ser um n√∫mero inteiro'),
  body('status')
    .optional()
    .isIn(['Recebida', 'Triagem', 'Aprovada', 'Despachada', 'Em andamento', 'Finalizada', 'Cancelada', 'Negada'])
    .withMessage('Status inv√°lido'),
  body('priority')
    .optional()
    .isIn(['Baixa', 'M√©dia', 'Alta', 'Cr√≠tica'])
    .withMessage('Prioridade deve ser: Baixa, M√©dia, Alta ou Cr√≠tica'),
  body('urgencyCode')
    .optional()
    .isIn(['Verde', 'Amarelo', 'Laranja', 'Vermelho'])
    .withMessage('C√≥digo de urg√™ncia deve ser: Verde, Amarelo, Laranja ou Vermelho')
];

// Valida√ß√µes para aprovar atendimento
const approveAttendanceValidation = [
  param('id')
    .isInt()
    .withMessage('ID deve ser um n√∫mero inteiro'),
  body('vehicleId')
    .isInt()
    .withMessage('ID do ve√≠culo deve ser um n√∫mero inteiro'),
  body('driverId')
    .optional()
    .isInt()
    .withMessage('ID do motorista deve ser um n√∫mero inteiro'),
  body('scheduledDateTime')
    .optional()
    .isISO8601()
    .withMessage('Data deve estar no formato ISO 8601')
];

// Valida√ß√µes para cancelar atendimento
const cancelAttendanceValidation = [
  param('id')
    .isInt()
    .withMessage('ID deve ser um n√∫mero inteiro'),
  body('cancelReason')
    .trim()
    .isLength({ min: 5, max: 500 })
    .withMessage('Motivo do cancelamento deve ter entre 5 e 500 caracteres')
];

// Valida√ß√µes para buscar por ID
const getByIdValidation = [
  param('id')
    .isInt()
    .withMessage('ID deve ser um n√∫mero inteiro')
];

// Valida√ß√µes para listagem com filtros
const getAttendancesValidation = [
  query('page')
    .optional()
    .isInt({ min: 1 })
    .withMessage('P√°gina deve ser um n√∫mero inteiro maior que 0'),
  query('limit')
    .optional()
    .isInt({ min: 1, max: 100 })
    .withMessage('Limite deve ser entre 1 e 100'),
  query('status')
    .optional()
    .isIn(['Recebida', 'Triagem', 'Aprovada', 'Despachada', 'Em andamento', 'Finalizada', 'Cancelada', 'Negada'])
    .withMessage('Status inv√°lido'),
  query('priority')
    .optional()
    .isIn(['Baixa', 'M√©dia', 'Alta', 'Cr√≠tica'])
    .withMessage('Prioridade inv√°lida'),
  query('startDate')
    .optional()
    .isISO8601()
    .withMessage('Data inicial deve estar no formato ISO 8601'),
  query('endDate')
    .optional()
    .isISO8601()
    .withMessage('Data final deve estar no formato ISO 8601')
];

// Rotas p√∫blicas (com autentica√ß√£o)

// Criar novo atendimento
router.post('/', 
  authenticate, 
  authorize('admin', 'supervisor', 'operator'),
  createAttendanceValidation,
  createAttendance
);

// Listar atendimentos com filtros
router.get('/', 
  authenticate,
  authorize('admin', 'supervisor', 'operator'),
  getAttendancesValidation,
  getAttendances
);

// Buscar atendimentos pendentes (deve vir antes de /:id)
router.get('/pending', 
  authenticate,
  authorize('admin', 'supervisor', 'operator'),
  async (req, res) => {
    try {
      console.log('=== BUSCANDO ATENDIMENTOS PENDENTES ===');
      
      const { Attendance } = require('../models');
      
      const pendingAttendances = await Attendance.findAll({
        where: { 
          status: 'Recebida' // Usando status correto do ENUM
        },
        include: [
          {
            association: 'operator',
            attributes: ['id', 'name', 'email', 'phone']
          },
          {
            association: 'supervisor',
            attributes: ['id', 'name', 'email', 'phone']
          },
          {
            association: 'Ride',
            include: [
              {
                association: 'driver',
                attributes: ['id', 'name', 'phone']
              },
              {
                association: 'Vehicle',
                attributes: ['id', 'plateNumber', 'model', 'vehicleType']
              }
            ]
          }
        ],
        order: [['createdAt', 'ASC']]
      });

      console.log(`‚úÖ Encontrados ${pendingAttendances.length} atendimentos pendentes`);
      res.json(pendingAttendances);
      
    } catch (error) {
      console.error('‚ùå Erro ao buscar atendimentos pendentes:', error);
      res.status(500).json({ message: 'Erro interno do servidor' });
    }
  }
);

// Buscar atendimento por ID
router.get('/:id', 
  authenticate,
  authorize('admin', 'supervisor', 'operator'),
  getByIdValidation,
  getAttendanceById
);

// Atualizar atendimento
router.put('/:id', 
  authenticate,
  authorize('admin', 'supervisor', 'operator'),
  updateAttendanceValidation,
  updateAttendance
);

// Aprovar atendimento (criar corrida) - Apenas admin e supervisor
router.post('/:id/approve', 
  authenticate,
  authorize('admin', 'supervisor'),
  approveAttendanceValidation,
  approveAttendance
);

// Cancelar atendimento
router.post('/:id/cancel', 
  authenticate,
  authorize('admin', 'supervisor', 'operator'),
  cancelAttendanceValidation,
  cancelAttendance
);

// Estat√≠sticas de atendimentos
router.get('/stats/summary', 
  authenticate,
  authorize('admin', 'supervisor'),
  getAttendanceStats
);

// Distribui√ß√£o inteligente de corridas - Aprova atendimentos e cria corridas automaticamente
router.post('/intelligent-dispatch', 
  authenticate,
  authorize('admin', 'supervisor'),
  intelligentDispatch
);

// üöÄ Distribui√ß√£o avan√ßada para m√∫ltiplos motoristas com an√°lise detalhada
router.post('/multi-driver-dispatch', 
  authenticate,
  authorize('admin', 'supervisor'),
  multiDriverDispatch
);

module.exports = router;